{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a52b66bd-9bda-455f-84cc-e1367a913a5c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to Hangman!\n",
      "Current word: __________\n",
      "Wrong guesses: 0/6\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Guess a letter:  6\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter a single letter.\n",
      "Current word: __________\n",
      "Wrong guesses: 0/6\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "\n",
    "def hangman():\n",
    "    words = ['python', 'java', 'kotlin', 'javascript', 'hangman', 'programming', 'computer']\n",
    "    word = random.choice(words)\n",
    "    guessed_letters = set()\n",
    "    wrong_guesses = 0\n",
    "    max_attempts = 6\n",
    "\n",
    "    print(\"Welcome to Hangman!\")\n",
    "    \n",
    "    while wrong_guesses < max_attempts:\n",
    "        # Display current state of the word\n",
    "        current_state = ''.join(letter if letter in guessed_letters else '_' for letter in word)\n",
    "        print(f\"Current word: {current_state}\")\n",
    "        print(f\"Wrong guesses: {wrong_guesses}/{max_attempts}\")\n",
    "        \n",
    "        # Check for win condition\n",
    "        if '_' not in current_state:\n",
    "            print(\"Congratulations! You've guessed the word:\", word)\n",
    "            return\n",
    "        \n",
    "        # Get player input\n",
    "        guess = input(\"Guess a letter: \").lower()\n",
    "        \n",
    "        # Check for valid input\n",
    "        if len(guess) != 1 or not guess.isalpha():\n",
    "            print(\"Please enter a single letter.\")\n",
    "            continue\n",
    "        \n",
    "        # Check if the letter was already guessed\n",
    "        if guess in guessed_letters:\n",
    "            print(\"You've already guessed that letter.\")\n",
    "            continue\n",
    "        \n",
    "        # Add guessed letter to the set\n",
    "        guessed_letters.add(guess)\n",
    "        \n",
    "        # Check if the guess is correct\n",
    "        if guess in word:\n",
    "            print(\"Good guess!\")\n",
    "        else:\n",
    "            print(\"Wrong guess!\")\n",
    "            wrong_guesses += 1\n",
    "    \n",
    "    print(\"Game over! The word was:\", word)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    hangman()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
